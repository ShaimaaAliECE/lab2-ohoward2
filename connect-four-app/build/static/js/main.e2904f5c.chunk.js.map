{"version":3,"sources":["App.js","index.js"],"names":["Hole","props","className","value","Column","onClick","handleClick","Array","holes","length","map","x","j","Board","state","boardState","fill","playerTurn","gameSelected","winner","boardFull","mode","this","setState","columnID","boardCopy","arr","slice","indexOf","newColumn","reverse","console","log","makeMove","bs","r","c","checkLine","checkWinner","winnerMessageStyle","columns","i","selectStartGame","Component","App","a","b","d","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2904f5c.chunk.js","sourcesContent":["import React,{ Component } from 'react';\nimport './App.css';\n\n\n//Holes are the places that the player pieces go in\nfunction Hole(props){\n  return <div className=\"Hole\"><div className={props.value}></div></div>\n}\n//Columns are vertical and made up of holes\n//A player clicks on a column in order to play a piece\nfunction Column(props){\n    return <div className=\"Column\" onClick={() => props.handleClick()}>\n      {[...Array(props.holes.length)].map((x, j) => \n        <Hole key={j} value={props.holes[j]}></Hole>)}\n      </div>\n }\n\nclass Board extends Component {\n  //The constructor\n  constructor() {\n    super();\n    //This is used when the app is first opened\n    this.state = {\n      boardState: new Array(7).fill(new Array(6).fill(null)),\n      //The red player goes first in the first game after opening the app\n      playerTurn: 'Red',\n      gameSelected: false,\n      //There is no winner yet, so no winner is set yet\n      winner: '',\n      //boardFull is set to zero because all the holes are empty\n      boardFull:0\n    }\n  }\n  //For when the player clicks the \"Play\" button to start the game\n  selectStartGame(mode){\n    this.setState({ \n       boardState: new Array(7).fill(new Array(6).fill(null)),\n       gameSelected: true,\n       //boardFull is set to zero because all the holes are empty when a game start\n       boardFull:0\n    })\n  }\n  //A move is made when the column is clicked\n  makeMove(columnID){\n    //For updating reasons, this creates a copy of the board\n    const boardCopy = this.state.boardState.map(function(arr) {\n      return arr.slice();\n    });\n    //Check to make sure the column is not full\n    if( boardCopy[columnID].indexOf(null) !== -1 ){\n      //Put player-piece on board in specified column\n      let newColumn = boardCopy[columnID].reverse()\n      newColumn[newColumn.indexOf(null)] = this.state.playerTurn\n      newColumn.reverse()\n      //The board is updated after the move is made, then it is the next player's turn\n      //And the boardFull counter is incremented by 1\n      this.setState({\n        playerTurn: (this.state.playerTurn === 'Red') ? 'Yellow' : 'Red',\n        boardState: boardCopy,\n        boardFull: this.state.boardFull+1\n      })\n      console.log(this.state.boardFull);\n    }\n  }\n\n  //Game will make a move when the player clicks, as long as the game hasn't been won yet.\n  handleClick(columnID) {\n    if(this.state.winner === ''){\n      this.makeMove(columnID)\n    }\n  }\n  \n  //Check for a winner every time a player makes a move (every time the game board updates)\n  componentDidUpdate(){\n    let winner = checkWinner(this.state.boardState)\n    if(this.state.winner !== winner)\n      this.setState({winner: winner})\n    }\n  \n  \n  render(){\n\n    //Display the win message when the game is won\n    let winnerMessageStyle\n    if(this.state.winner !== \"\"){\n      winnerMessageStyle = \"winnerMessage appear\"\n    }else {\n      winnerMessageStyle = \"winnerMessage\"\n    }\n  \n\n    //Construct the columns (each column has an id and is made of holes)\n    let columns = [...Array(this.state.boardState.length)].map((x, i) => \n      <Column\n          key={i}\n          holes={this.state.boardState[i]}\n          handleClick={() => this.handleClick(i)}\n      ></Column>\n    )\n    /*This section of code displays the game board, displays the win message if the game has been won,\n    and displays the \"play\" button when: the game hasn't been selected yet, the game has been won,\n    or the game board is full (meaning there was a tie). The board is full when 42 player-pieces\n    have been played, but there is no winner (7 columns x 6 rows = 42 holes) */\n    return (\n      <div>\n        {this.state.gameSelected &&\n          <div className=\"Board\">\n            {columns}\n          </div>\n        }\n        <div className={winnerMessageStyle}>{this.state.winner}</div>\n        {(!this.state.gameSelected || this.state.winner !== '' || this.state.boardFull === 42) &&\n          <div>\n            <button onClick={() => this.selectStartGame()}>Play</button>\n          </div>\n        }\n      </div>\n    )\n  }\n}\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2>Connect-4</h2>\n        </div>\n        <div className=\"Game\">\n          <Board></Board>\n        </div>\n      </div>\n    );\n  }\n}\n//This function checks the line to see if it is empty or not \n//and to see if the line is made up of all the same colour\nfunction checkLine(a,b,c,d) {\n    return ((a !== null) && (a === b) && (a === c) && (a === d));\n}\n//This function checks for a winner\n//If there is a winner, this function returns a win message\n/*In this function, r stands for rows, c stands for columns, and each bs[c][r] is a hole*/\nfunction checkWinner(bs) {\n    \n    //Check the horizontal lines\n    for (let r = 0; r < 6; r++)\n         for (let c = 0; c < 4; c++)\n             if (checkLine(bs[c][r], bs[c+1][r], bs[c+2][r], bs[c+3][r]))\n                 return bs[c][r] + ' wins!'\n\n    //Check the vertical lines\n    for (let c = 0; c < 7; c++)\n        for (let r = 0; r < 4; r++)\n            if (checkLine(bs[c][r], bs[c][r+1], bs[c][r+2], bs[c][r+3]))\n                return bs[c][r] + ' wins!'\n\n      //Check the diagonal lines that go up towards the right\n      for (let r = 0; r < 4; r++)\n      for (let c = 3; c < 6; c++)\n          if (checkLine(bs[c][r], bs[c-1][r+1], bs[c-2][r+2], bs[c-3][r+3]))\n              return bs[c][r] + ' wins!'\n\n    //Check the diagonal lines that go up towards the left\n    for (let r = 0; r < 3; r++)\n         for (let c = 0; c < 4; c++)\n             if (checkLine(bs[c][r], bs[c+1][r+1], bs[c+2][r+2], bs[c+3][r+3]))\n                 return bs[c][r] + ' wins!'\n\n    //When there is no winner there is no winner message displayed\n    return \"\";\n}\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}